{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/untrustedmodders/plugify/main/schemas/plugin.schema.json",
  "type": "object",
  "description": "A plugin for Plugify.",
  "title": "Plugin",
  "required": [
    "name",
    "version",
    "description",
    "author",
    "website",
    "license",
    "entry",
    "language"
  ],
  "properties": {
    "fileVersion": {
      "type": "number",
      "description": "The schema version number. Used to ensure compatibility between the plugin configuration and the Plugify parser. Increment when breaking changes are made to the schema format.",
      "minimum": 1
    },
    "version": {
      "type": "string",
      "description": "The semantic version (SemVer) of the plugin following the format MAJOR.MINOR.PATCH. Used for dependency resolution, compatibility checking, and update management.",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
      "minLength": 1
    },
    "name": {
      "type": "string",
      "description": "The unique identifier for the plugin. Should be lowercase, use hyphens for spaces, and be descriptive (e.g., 'audio-manager', 'database-connector', 'logging-framework').",
      "minLength": 1,
      "examples": ["audio-manager", "database-connector", "logging-framework"]
    },
    "description": {
      "type": "string",
      "description": "A comprehensive description of the plugin's functionality, features, and purpose. Should explain what problem it solves and its main capabilities."
    },
    "author": {
      "type": "string",
      "description": "The name or identifier of the plugin creator. Can be an individual name, username, or organization (e.g., 'John Doe', 'johndoe', 'Acme Corp').",
      "examples": ["John Doe", "jane-doe", "Acme Corporation", "Community Contributors"]
    },
    "website": {
      "type": "string",
      "description": "The official website, repository, or documentation URL for this plugin. Typically links to the project's GitHub repository, documentation site, or support page.",
      "pattern": "https?://(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)"
    },
    "license": {
      "type": "string",
      "description": "The software license identifier for the plugin (e.g., 'MIT', 'Apache-2.0', 'GPL-3.0'). Should use SPDX license identifiers when possible. See https://spdx.org/licenses/",
      "examples": ["MIT", "Apache-2.0", "GPL-3.0", "BSD-3-Clause", "proprietary"]
    },
    "platforms": {
      "type": "array",
      "description": "Target platforms and architectures this plugin supports. Each entry should specify the OS and architecture in the format 'os_arch' (e.g., 'windows_x64', 'linux_arm64'). Leave empty to support all platforms.",
      "items": {
        "type": "string",
        "description": "Platform name.",
        "pattern": "^[a-z0-9]+(_(x64|arm64|x86|arm32|riscv32|riscv64))$",
        "minLength": 1,
        "examples": [
          "windows_x64",
          "steamrt_x64"
        ]
      }
    },
    "dependencies": {
      "type": "array",
      "description": "Other plugins required for this plugin to function properly. Dependencies are resolved and loaded before this plugin. Version constraints ensure compatibility between plugins.",
      "items": {
        "type": "object",
        "description": "Describes the properties of a plugin dependency.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the plugin reference.",
            "minLength": 1
          },
          "constraints": {
            "type": "array",
            "description": "Version constraints using operators: '==' (exact match), '!=' (exclude version), '>' (newer than), '>=' (at least), '<' (older than), '<=' (at most), '~>' (compatible with - allows patch updates). Empty string accepts any version. Multiple constraints are AND-ed together.",
            "items": {
              "type": "string",
              "description": "A version constraint in the format '[operator]version' (e.g., '>=1.2.3') or empty string for any version. Supported operators: '==', '!=', '>', '>=', '<', '<=', '~>'.",
              "pattern": "^(==|!=|>|>=|<|<=|~>|)(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$|^$",
              "minLength": 0
            },
            "examples": [">=1.0.0", "~>2.1.0", ">=1.0.0,<2.0.0", "!=1.2.3", ""]
          },
          "optional": {
            "type": "boolean",
            "description": "Indicates whether the plugin reference is optional."
          }
        }
      }
    },
    "conflicts": {
      "type": "array",
      "description": "A list of plugin references specifying plugins that conflict with this plugin.",
      "items": {
        "type": "object",
        "description": "Plugins that are incompatible with this plugin. The plugin manager will prevent loading conflicting plugins simultaneously. Use this to prevent issues with plugins that provide overlapping or incompatible functionality.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the conflicting plugin.",
            "minLength": 1
          },
          "constraints": {
            "type": "array",
            "description": "A list of version constraints for the conflicting plugin, e.g., '>=1.2.3', '==2.0.0', '~>2.1.0', or '' for any version.",
            "items": {
              "type": "string",
              "description": "A version constraint in the format '[operator]version' (e.g., '>=1.2.3') or empty string for any version. Supported operators: '==', '!=', '>', '>=', '<', '<=', '~>'.",
              "pattern": "^(==|!=|>|>=|<|<=|~>|)(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$|^$",
              "minLength": 0
            },
            "examples": [">=1.0.0", "~>2.1.0", ">=1.0.0,<2.0.0", "!=1.2.3", ""]
          },
          "reason": {
            "type": "string",
            "description": "The reason why this plugin conflicts with the specified plugin.",
            "minLength": 1
          }
        }
      }
    },

    "entry": {
      "type": "string",
      "description": "The entry point file or main executable for the plugin, relative to the plugin's directory. This is the file that will be loaded when the plugin starts (e.g., 'main.dll', 'plugin.so', 'index.js').",
      "minLength": 1,
      "examples": ["main.dll", "plugin.so", "index.js", "Plugin.cs", "plugin.py"]
    },
    "language": {
      "type": "object",
      "description": "Specifies the programming language and language module required to run this plugin. The specified language module must be installed for the plugin to load.",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifier of the language module required to run this plugin. Must match an installed language module's name (e.g., 'cpp', 'python3', 'javascript').",
          "minLength": 1,
          "examples": [
            "cpp",
            "csharp",
            "python3",
            "javascript",
            "golang",
            "lua"
          ]
        },
        "version": {
          "type": "string",
          "description": "Optional minimum version requirement for the language module. If specified, the plugin will only load if the installed language module meets this version requirement.",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "minLength": 1
        }
      }
    },
    "methods": {
      "type": "array",
      "description": "Public API methods exposed by this plugin for other plugins to call. These methods form the plugin's inter-plugin communication interface. Each method defines its signature, parameters, and return type for cross-language compatibility.",
      "items": {
        "$ref": "#/$defs/methodObject"
      }
    }
  },
  "$defs": {
    "methodObject": {
      "type": "object",
      "description": "An object describing single function/method exposed by the plugin.",
      "required": [
        "name",
        "funcName",
        "paramTypes",
        "retType"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The public API name for this method. This is the name other plugins will use to call this function. Should be descriptive and follow consistent naming conventions.",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
          "minLength": 1
        },
        "group": {
          "type": "string",
          "description":"Optional categorization for documentation generation. Groups related methods together (e.g., 'File Operations', 'Network', 'Configuration'). Used to organize API documentation."
        },
        "description": {
          "type": "string",
          "description": "Detailed explanation of what this method does, including its purpose, behavior, side effects, and any important notes for callers."
        },
        "funcName": {
          "type": "string",
          "description": "The actual function name as implemented in the plugin's source code. This maps the public API name to the internal implementation. Must match exactly with the function name in your code.",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
          "minLength": 1
        },
        "paramTypes": {
          "type": "array",
          "description": "Ordered list of parameters this method accepts. Each parameter defines its type, name, and optional metadata. The order must match the function signature exactly.",
          "items": {
            "type": "object",
            "description": "Parameter's information.",
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The data type of this parameter value.The type system ensures cross-language compatibility.",
                "enum": ["void", "bool", "char8", "char16", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "ptr64", "ptr32", "float", "double", "function", "string", "any", "bool[]", "char8[]", "char16[]", "int8[]", "int16[]", "int32[]", "int64[]", "uint8[]", "uint16[]", "uint32[]", "uint64[]", "ptr64[]", "float[]", "double[]", "string[]", "any[]", "vec2[]", "vec3[]", "vec4[]", "mat4x4[]", "vec2", "vec3", "vec4", "mat4x4"]
              },
              "name": {
                "type": "string",
                "description": "The parameter value name used in generated bindings and documentation. Should be descriptive and follow the target language's naming conventions.",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                "minLength": 1
              },
              "description": {
                "type": "string",
                "description": "Explanation of this parameter's purpose, valid ranges, special values. Include units of measurement where applicable."
              },
              "prototype": {
                "type": "object",
                "description": "For 'function' type parameters only. Defines the signature of the callback function or function pointer, including its parameters and return type.",
                "$ref": "#/$defs/methodObject"
              },
              "enum": {
                "type": "object",
                "description": "For enum type parameters. Defines the enumeration structure including all possible values and their integer mappings. Used for type-safe enum passing between plugins.",
                "$ref": "#/$defs/enumObject"
              },
              "default": {
                "type": ["string", "number", "boolean"],
                "description": "Optional default value for this parameter. If provided, the parameter becomes optional in languages that support default arguments. Must be a valid value for the parameter's type.",
                "examples": ["defaultValue", 42, true]
              }
            }
          }
        },
        "retType": {
          "type": "object",
          "description": "The return value specification for this method. Defines what type of data the method returns, if any. Use type 'void' for methods that don't return a value.",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The data type of this return value.The type system ensures cross-language compatibility.",
              "enum": ["void", "bool", "char8", "char16", "int8", "int16", "int32", "int64", "uint8", "uint16", "uint32", "uint64", "ptr64", "ptr32", "float", "double", "function", "string", "any", "bool[]", "char8[]", "char16[]", "int8[]", "int16[]", "int32[]", "int64[]", "uint8[]", "uint16[]", "uint32[]", "uint64[]", "ptr64[]", "float[]", "double[]", "string[]", "any[]", "vec2[]", "vec3[]", "vec4[]", "mat4x4[]", "vec2", "vec3", "vec4", "mat4x4"]
            },
            "name": {
              "type": "string",
              "description": "The return value name used in generated bindings and documentation. Should be descriptive and follow the target language's naming conventions.",
              "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
              "minLength": 1
            },
            "description": {
              "type": "string",
              "description": "Meaning of the return value. Include units of measurement where applicable."
            },
            "prototype": {
              "type": "object",
              "description": "For 'function' type returns only. Defines the signature of the callback function or function pointer, including its parameters and return type.",
              "$ref": "#/$defs/methodObject"
            },
            "enum": {
              "type": "object",
              "description": "For enum type returns. Defines the enumeration structure including all possible values and their integer mappings. Used for type-safe enum passing between plugins.",
              "$ref": "#/$defs/enumObject"
            }
          }
        }
      }
    },
    "enumObject": {
      "type": "object",
      "description": "An object describing enum structure.",
      "required": [
        "name",
        "values"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The type name for this enumeration. Will be used to generate enum types in target languages. Should follow PascalCase naming convention.",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Explanation of what this enumeration represents and how it should be used. Include any important notes about the values or their relationships."
        },
        "values": {
          "type": "array",
          "description": "Enum's entries.",
          "items": {
            "type": "object",
            "description": "The complete list of enumeration values. Each value has a unique name and integer mapping. Values are used for cross-language enum compatibility.",
            "required": [
              "name",
              "value"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The identifier for this enum value. Should follow UPPER_SNAKE_CASE or the appropriate convention for the target language. Must be unique within the enum.",
                "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
                "minLength": 1
              },
              "description": {
                "type": "string",
                "description": "Explanation of what this enum value represents, when it should be used, and any special behavior associated with it."
              },
              "value": {
                "type": "integer",
                "description": "The integer value mapped to this enum entry. Must be unique within the enum. Used for consistent cross-language enum representation."
              }
            }
          }
        }
      }
    }
  }
}