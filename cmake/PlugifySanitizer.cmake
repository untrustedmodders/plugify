# Set appropriate compiler and linker flags for sanitizers.
#
# Usage of this module:
#  enable_sanitizers("address;leak")

# Add flags
set(PLUGIFY_SAN_COMPILE_FLAGS "" CACHE STRING "" FORCE)

macro(enable_sanitizer sanitizer)
    if(${sanitizer} MATCHES "address")
        find_package(ASan)
        list(APPEND PLUGIFY_SAN_COMPILE_FLAGS -fsanitize=address -fno-omit-frame-pointer)
    elseif(${sanitizer} MATCHES "thread")
        find_package(TSan)
        list(APPEND PLUGIFY_SAN_COMPILE_FLAGS -fsanitize=thread)
        if(TSan_FOUND)
            link_libraries(${TSan_LIBRARY})
        endif()
    elseif(${sanitizer} MATCHES "leak")
        find_package(LSan)
        list(APPEND PLUGIFY_SAN_COMPILE_FLAGS -fsanitize=leak)
    elseif(${sanitizer} MATCHES "undefined")
        find_package(UBSan)
        list(APPEND PLUGIFY_SAN_COMPILE_FLAGS -fsanitize=undefined -fno-sanitize-recover=undefined)
    else()
        message(FATAL_ERROR "Santizer ${sanitizer} not supported.")
    endif()
endmacro()

macro(enable_sanitizers SANITIZERS)
    foreach(_san ${SANITIZERS})
        string(TOLOWER ${_san} _san)
        if(_san MATCHES "thread")
            if(${_use_other_sanitizers})
                message(FATAL_ERROR "thread sanitizer is not compatible with ${_san} sanitizer.")
            endif()
            set(_use_thread_sanitizer 1)
        else()
            if(${_use_thread_sanitizer})
                message(FATAL_ERROR "${_san} sanitizer is not compatible with thread sanitizer.")
            endif()
            set(_use_other_sanitizers 1)
        endif()
    endforeach()

    message("Sanitizers: ${SANITIZERS}")

    foreach(_san ${SANITIZERS})
        string(TOLOWER ${_san} _san)
        enable_sanitizer(${_san})
    endforeach()

    message("Sanitizers compile flags: ${PLUGIFY_SAN_COMPILE_FLAGS}")
endmacro()

if(PLUGIFY_USE_SANITIZER)
    enable_sanitizers("${PLUGIFY_ENABLED_SANITIZERS}")

    if(NOT PLUGIFY_COMPILER_MSVC)
        set(PLUGIFY_HAS_SANITIZER TRUE CACHE BOOL "" FORCE)
        mark_as_advanced(PLUGIFY_HAS_SANITIZER)
    endif()

    if(PLUGIFY_HAS_SANITIZER)
        target_compile_options(${PROJECT_NAME} PRIVATE $<$<CONFIG:Debug>: ${PLUGIFY_SAN_COMPILE_FLAGS}>)
        target_link_libraries(${PROJECT_NAME} PRIVATE $<$<CONFIG:Debug>: ${PLUGIFY_SAN_COMPILE_FLAGS}>)
    else()
        message(VERBOSE "The option PLUGIFY_USE_SANITIZER is set but sanitizer support is not available.")
    endif()
endif()

if(PLUGIFY_USE_CLANG_TIDY)
    find_program(PLUGIFY_CLANG_TIDY_EXECUTABLE "clang-tidy")

    if(PLUGIFY_CLANG_TIDY_EXECUTABLE)
        set(CMAKE_CXX_CLANG_TIDY "${PLUGIFY_CLANG_TIDY_EXECUTABLE}; --config-file=.clang-tidy; --header-filter=src/.*; --extra-arg=/EHsc")
    else()
        message(VERBOSE "The option PLUGIFY_USE_CLANG_TIDY is set but clang-tidy executable is not available.")
    endif()
endif()
