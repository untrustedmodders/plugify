if(PLUGIFY_DEFAULT_CXX_STANDARD LESS 20)
    message(FATAL_ERROR "Unsupported C++ standard: ${DEFAULT_CXX_STANDARD}. Must be greater then 17 (e.g., 23, 26, or higher).")
endif()
if(PLUGIFY_DEFAULT_C_STANDARD LESS 11)
    message(FATAL_ERROR "Unsupported C standard: ${PLUGIFY_DEFAULT_C_STANDARD}. Must be greater then 99 (e.g., 11, 17, or higher).")
endif()

# Set standards
set(CMAKE_CXX_STANDARD ${PLUGIFY_DEFAULT_CXX_STANDARD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD ${PLUGIFY_DEFAULT_C_STANDARD})
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_POLICY_VERSION_MINIMUM 3.5)

message(STATUS "CXX Standard: ${PLUGIFY_DEFAULT_CXX_STANDARD}")
message(STATUS "C Standard: ${PLUGIFY_DEFAULT_C_STANDARD}")

# C++20 feature checks. Some Linux environments are incomplete.
check_cpp20_feature("__cpp_structured_bindings" 201606)
check_cpp20_feature("__cpp_constinit" 201907)
check_cpp20_feature("__cpp_designated_initializers" 201707)
check_cpp20_feature("__cpp_using_enum" 201907)
check_cpp20_feature("__cpp_lib_bit_cast" 201806)
check_cpp20_feature("__cpp_lib_bitops" 201907)
check_cpp20_feature("__cpp_lib_int_pow2" 202002)
check_cpp20_feature("__cpp_lib_starts_ends_with" 201711)
check_cpp20_attribute("likely" 201803)
check_cpp20_attribute("unlikely" 201803)
check_cpp20_attribute("no_unique_address" 201803)

include(CheckCXXCompilerFlag)

if(PLUGIFY_COMPILER_GCC OR PLUGIFY_COMPILER_CLANG)
    if(PLUGIFY_USE_LIBCPP)
        check_cxx_compiler_flag(-stdlib=libc++ PLUGIFY_HAS_LIBCPP)
        if(NOT PLUGIFY_HAS_LIBCPP)
            message(VERBOSE "The option PLUGIFY_USE_LIBCPP is set but libc++ is not available.")
        endif()

        if(PLUGIFY_USE_STATIC_STDLIB)
            check_cxx_compiler_flag(-static-libc++ PLUGIFY_HAS_STATIC_LIBCPP)
            if(NOT PLUGIFY_HAS_LIBCPP)
                message(VERBOSE "The option PLUGIFY_USE_STATIC_STDLIB is set but static-libc++ is not available.")
            endif()
        endif()
    else()
        if(PLUGIFY_USE_STATIC_STDLIB)
            check_cxx_compiler_flag(-static-libstdc++ PLUGIFY_HAS_STATIC_LIBSTDCPP)
            if(NOT PLUGIFY_HAS_LIBCPP)
                message(VERBOSE "The option PLUGIFY_USE_STATIC_STDLIB is set but static-libstdc++ is not available.")
            endif()
        endif()
    endif()

    if(PLUGIFY_USE_STATIC_STDLIB)
        check_cxx_compiler_flag(-static-libgcc PLUGIFY_HAS_STATIC_LIBGCC)
        if(NOT PLUGIFY_HAS_LIBCPP)
            message(VERBOSE "The option PLUGIFY_USE_STATIC_STDLIB is set but static-libgcc is not available.")
        endif()
    endif()
endif()
